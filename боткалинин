import os
import logging
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
load_dotenv()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
HF_TOKEN = os.getenv("HF_TOKEN")
HF_MODEL = "HuggingFaceH4/zephyr-7b-beta"
HF_API_URL = f"https://api-inference.huggingface.co/models/{HF_MODEL}"
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

def ask_huggingface(prompt: str) -> str:
    if not prompt or not prompt.strip():
        return "–í–æ–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π. –ó–∞–¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
    
    headers = {
        "Authorization": f"Bearer {HF_TOKEN}",
        "Content-Type": "application/json"
    }
    prompt = f"–û—Ç–≤–µ—Ç—ã –ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. {prompt}"
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 150,
            "return_full_text": False
        }
    }
    try:
        response = requests.post(HF_API_URL, headers=headers, json=payload, timeout=10)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ API HuggingFace: {response.status_code} - {response.text}")
            return "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ HuggingFace üòî"
        
        data = response.json()
        if isinstance(data, dict) and "error" in data:
            logger.error(f"–û—à–∏–±–∫–∞ HuggingFace: {data['error']}")
            return f"–û—à–∏–±–∫–∞: {data['error']}"
        
        if not data or not isinstance(data, list) or not data[0].get("generated_text"):
            logger.error("HuggingFace –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
        
        return data[0]["generated_text"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_huggingface: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."

def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help"),
            InlineKeyboardButton(text="–ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞", callback_data="square")
        ],
        [InlineKeyboardButton(text="–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", callback_data="ask")]
    ])
    return keyboard

@dp.message(CommandStart())
async def start(message: types.Message):
    try:
        user = message.from_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç")
        welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç –ö–∞–ª–∏–Ω–∏–Ω –ú–∞—Ç–≤–µ–π —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é!. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /help"
        await message.reply(welcome_text, reply_markup=get_main_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    try:
        help_text = (
            "/start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "/help ‚Äì –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "/square [—á–∏—Å–ª–æ] ‚Äì –ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞\n"
            "/ask [–≤–æ–ø—Ä–æ—Å] ‚Äì –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò\n"
            "–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò"
        )
        await message.reply(help_text, reply_markup=get_main_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /help: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("square"))
async def square(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
        if not args:
            await message.reply("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /square 5")
            return
        num = float(args)
        await message.reply(f"{num} –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ = {num ** 2}")
    except (ValueError, IndexError):
        await message.reply("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /square 5")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /square: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("ask"))
async def ask_nlp(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
        if not args:
            await message.reply("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /ask –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?")
            return
        if len(args) > 1000:
            await message.reply("–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        await message.reply("<i>–î—É–º–∞—é...</i>")
        response = ask_huggingface(args)
        if response:
            await message.reply(response[:4096])
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /ask: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message()
async def handle_message(message: types.Message):
    try:
        user_input = message.text
        if user_input.startswith('/'):
            return
        try:
            num = float(user_input)
            await message.reply(f"{num} –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ = {num ** 2}")
        except ValueError:
            await message.reply("<i>–î—É–º–∞—é...</i>")
            response = ask_huggingface(user_input)
            if response:
                await message.reply(response[:4096])
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    try:
        if callback.data == "help":
            await callback.message.reply(
                "/start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                "/help ‚Äì –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n"
                "/square [—á–∏—Å–ª–æ] ‚Äì –ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞\n"
                "/ask [–≤–æ–ø—Ä–æ—Å] ‚Äì –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò\n"
                "–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò",
                reply_markup=get_main_keyboard()
            )
        elif callback.data == "square":
            await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /square 5")
        elif callback.data == "ask":
            await callback.message.reply("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ò–ò, –Ω–∞–ø—Ä–∏–º–µ—Ä: /ask –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?")
        await callback.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand(command="help", description="–í—Å–µ –∫–æ–º–∞–Ω–¥—ã"),
        BotCommand(command="square", description="–ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞"),
        BotCommand(command="ask", description="–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò")
    ]
    try:
        await bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")

async def main():
    try:
        await set_bot_commands(bot)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

if __name__ == '__main__':
    asyncio.run(main())
